# -*- coding: utf-8 -*-
"""bot-using-transformers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lA3oXbwpcR6Y2LV9kp1PNyawdjVsqOZP
"""

!pip install speechRecognition

import speech_recognition as sr
!pip install pydub

model=sr.Recognizer()

def audio_to_text():
 mp3_file=r'/content/class.mp3'

from pydub import AudioSegment
from pydub.playback import play
audio=AudioSegment.from_mp3(mp3_file)
audio.export('temp.wav',format='wav')
audio_file=r'/content/temp.wav'
with sr.AudioFile(audio_file) as source:
  audio_data=model.record(source)
  text=model.recognize_google(audio_data)
  print(text)

!pip install transformers

from transformers import pipeline
analyzer = pipeline("sentiment-analysis")

text_input=input('enter some text:')

summarize = pipeline('summarization')

import builtins
txt = builtins.input("enter the text: ")

result = summarize(txt)
result

from transformers import pipeline

# Load a pre-trained question-answering pipeline from Hugging Face
qa_pipeline = pipeline("question-answering")

# Function to ask questions and get answers based on the provided context
def ask_user_questions():
    # Default context
    context = '''summary_text': " Recursion is just another way to create a loop but infinite Loops aren't very useful in practice . Recursive functions are not the right choice in every situation but they are very good for tree and graph traversals . In the next video I'll explain how to improve this with memoization'''

   # print("Welcome to the interactive story! Ask me any question about Luca's adventure.")

    # Loop to continuously take user questions
    while True:
        # Ask the user to input a question
        user_question = input("Ask a question (or type 'exit' to quit): ").lower()

        # Exit condition
        if user_question == 'exit':
            print("Goodbye!")
            break

        # Use the pipeline to get the answer from the model
        result = qa_pipeline(question=user_question, context=context)

        # Print the answer
        print("Answer:", result['answer'])

        # Ask if the user wants to ask another question
        continue_choice = input("Do you want to ask another question? (yes/no): ").lower()
        if continue_choice != 'yes':
          print("Goodbye!")
          # Corrected indentation for the break statement
          break  # Exit if the user does not want to continue

# Start the question-answering loop
ask_user_questions()

from transformers import pipeline

text_input =input('enter some text')
analyzer = pipeline("sentiment-analysis")
res = analyzer(text_input)
res

